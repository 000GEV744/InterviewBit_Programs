/*

Max Non Negative SubArray

Problem Description

Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.
The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.
Maximum sub-array is defined in terms of the sum of the elements in the sub-array.

Find and return the required subarray.
NOTE:

If there is a tie, then compare with segment's length and return segment which has maximum length.
If there is still a tie, then return the segment with minimum starting index.

Problem Constraints
1 <= N <= 105
-109 <= A[i] <= 109

Input Format
The first and the only argument of input contains an integer array A, of length N.

Output Format
Return an array of integers, that is a subarray of A that satisfies the given conditions.

Example Input
Input 1:

 A = [1, 2, 5, -7, 2, 3]
Input 2:

 A = [10, -1, 2, 3, -4, 100]
*/

public class Solution {
    public ArrayList<Integer> maxset(ArrayList<Integer> A) {
        
        int aStart = -1, aEnd = -1, start = 0, end = 0;
        long sum = 0;
        long max = 0;
        while(end < A.size())
        {
            //for positive integer or 0
            if(A.get(end)>=0)
            {
               sum +=(long)A.get(end);
               
               if(max<sum){
                   max = sum;
                   aStart = start;
                   aEnd = end;
               }
               else if(max==sum && ((end-start+1)>(aEnd-aStart+1)
                        ||
                        (((end-start+1)==(aEnd-aStart+1)) && (start>aStart)))){
                   aEnd = end;
                   aStart = start;
               }
               /*else if(max==sum && ((end-start+1)==(aEnd-aStart+1)) && (start>aStart)){
                   aEnd = end;
                   aStart = start; 
               }*/
            }
            
            //for negative interger
            else{
                sum = 0;
                start=end+1;
            }
            
            end++;
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        if(aStart != -1 && aEnd != -1){
        for(int i = aStart; i<=aEnd; i++){
            ans.add(A.get(i));
        }
        }
        return ans;
    }
}
